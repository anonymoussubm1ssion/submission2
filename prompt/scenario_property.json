{
  "reentrancy": {
    "name": "reentrancy",
    "scen": "make an external call",
    "prop": "update the external call-related state after the external call"
  },
  "arithmetic": {
    "name": "arithmetic",
    "scen": "perform mathematical calculation that may cause integer overflow/underflow",
    "prop": "didn't adopt some defense techniques(such as SafeMath Library or solidity built-in overflow check or condition check) to prevent integer overflow/underflow"
  },
  "access_control": {
    "name": "access control",
    "scen": "have code statements that may cause critical impact to other users(such as execute unauthorized transfer, permission management) or contract itself(self-destroy)",
    "prop": "have inappropriate or miss permission check before operating such operations, or the caller can escalate the permission by calling other functions first without effort, or approval can't be revoked"
  },
  "unchecked_low_level_calls": {
    "name": "unchecked low level calls",
    "scen": "use low-level calls like 'call', 'delegatecall', 'staticcall', or `send`",
    "prop": "doesn't apply any return value check or exception handler for the low-level call"
  },
  "denial_of_service": {
    "name": "denial of service",
    "scen": "some contract's logic or operations can prevent OTHER USERS from executing functions or accessing resources",
    "prop": "such logic and operation can be triggered by unauthorized user to cause the denial of service"
  },
  "tx_order_dependency": {
    "name": "transaction order dependency",
    "scen": "make the transaction sender receive token/ether or change the token-transfer limitation/user-permission by passing paraments to functions",
    "prop": "the outcome of the origin transaction can be influenced by surrounded transactions that are created based on awareness to the origin function"
  },
  "block_state_dependency": {
    "name": "block state dependency",
    "scen": "have code statements that get or calculate block properties like timestamp, block number, or blockhash",
    "prop": "these block properties are used as condition check's paraments for sensitive operation or crypto-asset distribution"
  },
  "bad_randomness": {
    "name": "bad randomness",
    "scen": "there are variables that should have randomness characteristic",
    "prop": "the generation or assignment of such random variables have a chance to be manipulated, predicted or found, through, for example, other/previous transactions or generated by predictable variables"
  },
  "price_manipulation": {
    "name": "price manipulation",
    "scen": "have code statements that get or calculate tokenâ€™s value/price",
    "prop": "such value/price is based on the market reserves/AMMprice/exchangeRate OR the custom token balanceOf/totalSupply/amount/liquidity calculation"
  },
  "governance_attack": {
    "name": "governance attack",
    "scen": "calculate vote amount/number for protocol governance",
    "prop": "this vote amount/number is from a vote weight that might be manipulated by flashloan"
  },
  "dangerous_delegatecall": {
    "name": "dangerous delegatecall",
    "scen": "have delegatecall to execute external code",
    "prop": "the callee contract or the function that is called by delegatecall can be manipulated"
  }
}